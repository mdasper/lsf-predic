# -*- coding: utf-8 -*-
"""strength.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cTJN8tPw8OkUuusWUF8rSfNo9NdNt3qH
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.decomposition import PCA
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
file_path = r"C:\Users\govin\OneDrive\Documents\strength\model.xlsx"
data = pd.read_excel(file_path)

# Separate features and target variable
X = data.drop(columns=['LSF'])
y = data['LSF']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Impute missing values using the mean of each column
imputer = SimpleImputer(strategy='mean')
X_train_imputed = imputer.fit_transform(X_train)
X_test_imputed = imputer.transform(X_test)

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train_imputed)
X_test_scaled = scaler.transform(X_test_imputed)

# Apply PCA for dimensionality reduction
pca = PCA(n_components=0.95)  # retain 95% of variance
X_train_pca = pca.fit_transform(X_train_scaled)
X_test_pca = pca.transform(X_test_scaled)

# Train the linear regression model
model = LinearRegression()
model.fit(X_train_pca, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test_pca)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Print the results

print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (RÂ²) score: {r2}")

# Function to predict using user input and display whether it is good or not
def predict_user_input():
    # Prompt user for input values
    user_input = {}
    for feature in X.columns:
        user_input[feature] = float(input(f"Enter value for {feature}: "))

    # Convert user input to DataFrame
    user_input_df = pd.DataFrame([user_input])

    # Impute missing values using the mean of each column (if any)
    user_input_imputed = imputer.transform(user_input_df)

    # Standardize the features
    user_input_scaled = scaler.transform(user_input_imputed)

    # Apply PCA
    user_input_pca = pca.transform(user_input_scaled)

    # Make prediction
    prediction = model.predict(user_input_pca)[0]

    # Determine if the prediction is good or not
    # Define your threshold here
    if 92 <= prediction <= 99:
        result = "good strength"
    else:
        result = "need to improve"

    # Display the prediction and whether it is good or not
    print(f"Predicted LSF value: {prediction}")
    print(f"This LSF value is considered as{result}.")

# Example usage
predict_user_input()
#LSF=CaO/(2.8SiO2 + 1.2Al2O3 + 0.65Fe2O3)

import pickle
pipeline = {
    'imputer': imputer,
    'scaler': scaler,
    'pca': pca,
    'model': model
}
with open('model_pipeline.pkl', 'wb') as f:
    pickle.dump(pipeline, f)

